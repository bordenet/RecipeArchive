/**
 * Shared TypeScript types for RecipeArchive platform
 * Based on the unified data model specification in ../../docs/architecture/data-model.md
 */

/**
 * Core recipe interface matching the unified data model
 */
export interface Recipe {
  // Primary Identifiers
  id: string; // UUID v4, generated by backend
  userId: string; // AWS Cognito user ID

  // Required Fields (Browser Extension Extraction)
  title: string; // Recipe name (max 200 chars)
  ingredients: Ingredient[]; // Structured ingredient list
  instructions: Instruction[]; // Step-by-step cooking directions
  sourceUrl: string; // Original recipe URL
  mainPhotoUrl?: string; // Hero image URL (S3 signed URL)

  // Optional Metadata (If Available)
  prepTimeMinutes?: number; // Preparation time
  cookTimeMinutes?: number; // Cooking time
  totalTimeMinutes?: number; // Total time (prep + cook)
  servings?: number; // Number of servings
  yield?: string; // Alternative to servings (e.g., "24 cookies")

  // System Fields
  createdAt: string; // ISO 8601 timestamp
  updatedAt: string; // ISO 8601 timestamp
  isDeleted: boolean; // Soft delete flag
  version: number; // For conflict resolution

  // Archive & Backup
  webArchiveUrl?: string; // Full page backup (S3 signed URL)
  webArchiveFormat: 'html' | 'pdf'; // Archive format

  // Future Extensions (Optional)
  tags?: string[]; // User-defined tags
  notes?: string; // User notes
  rating?: number; // User rating (1-5)
}

/**
 * Structured ingredient with quantity, unit, and name
 */
export interface Ingredient {
  quantity?: number; // Numeric amount (e.g., 2)
  unit?: string; // Unit of measurement (e.g., "cups")
  name: string; // Ingredient name (e.g., "all-purpose flour")
  notes?: string; // Additional info (e.g., "sifted", "room temperature")
  originalText: string; // Original extracted text for fallback
}

/**
 * Step-by-step cooking instruction
 */
export interface Instruction {
  stepNumber: number; // Sequential step number (1, 2, 3...)
  text: string; // Instruction text
  timeMinutes?: number; // Time for this step (if specified)
  temperature?: string; // Temperature (e.g., "350Â°F", "medium heat")
}

/**
 * Recipe creation/update request payload
 */
export interface CreateRecipeRequest {
  title: string;
  ingredients: Ingredient[];
  instructions: Instruction[];
  sourceUrl: string;
  mainPhotoUrl?: string;
  prepTimeMinutes?: number;
  cookTimeMinutes?: number;
  totalTimeMinutes?: number;
  servings?: number;
  yield?: string;
  webArchiveUrl?: string;
  webArchiveFormat?: 'html' | 'pdf';
  tags?: string[];
  notes?: string;
  rating?: number;
}

/**
 * Recipe update request payload (all fields optional except id)
 */
export interface UpdateRecipeRequest extends Partial<CreateRecipeRequest> {
  id: string;
  version: number; // For optimistic locking
}

/**
 * Recipe search parameters
 */
export interface RecipeSearchParams {
  q?: string; // Text search in title and ingredients
  dateFrom?: string; // ISO date filter (created after)
  dateTo?: string; // ISO date filter (created before)
  minServings?: number; // Minimum servings filter
  maxServings?: number; // Maximum servings filter
  maxPrepTime?: number; // Maximum prep time (minutes)
  maxCookTime?: number; // Maximum cook time (minutes)
  source?: string; // Filter by source domain
  tags?: string[]; // Filter by tags
  sortBy?: 'title' | 'createdAt' | 'updatedAt' | 'rating';
  sortOrder?: 'asc' | 'desc';
  limit?: number; // Results per page (max 50)
  offset?: number; // Pagination offset
}

/**
 * Recipe search response
 */
export interface RecipeSearchResponse {
  recipes: Recipe[]; // Array of matching recipes
  total: number; // Total matching results
  hasMore: boolean; // Whether more results exist
  searchTime: number; // Search execution time (ms)
}

/**
 * Recipe list response for pagination
 */
export interface RecipeListResponse {
  recipes: Recipe[];
  total: number;
  hasMore: boolean;
  nextOffset?: number;
}

/**
 * API error response
 */
export interface ApiError {
  error: string;
  message: string;
  code?: string;
  details?: Record<string, unknown>;
  timestamp: string;
}

/**
 * Diagnostic data for parser improvement (Browser Extension)
 */
export interface DiagnosticData {
  // Page Information
  url: string;
  hostname: string;
  title: string;
  timestamp: string;

  // DOM Analysis
  elementCount: number;
  headingCount: number;
  listCount: number;
  imageCount: number;
  linkCount: number;

  // Recipe Detection
  hasJsonLd: boolean;
  hasRecipeKeywords: boolean;
  extractionMethod?: 'json-ld' | 'manual' | 'fallback';
  extractionSuccess: boolean;
  extractionTime: number;

  // Extracted Data Quality
  ingredientCount: number;
  instructionCount: number;
  hasMainPhoto: boolean;
  hasTiming: boolean;

  // Technical Metadata
  userAgent: string;
  extensionVersion: string;
  platform: 'chrome' | 'safari';

  // Failure Information (for auto-diagnostics)
  failureReason?: string;
  errorMessage?: string;
  stackTrace?: string;
}

/**
 * Authentication types
 */
export interface AuthUser {
  id: string; // Cognito user ID
  email: string;
  givenName?: string;
  familyName?: string;
  emailVerified: boolean;
}

export interface AuthTokens {
  accessToken: string;
  refreshToken: string;
  idToken: string;
  expiresAt: number; // Unix timestamp
}

/**
 * S3 file upload types
 */
export interface S3UploadRequest {
  fileName: string;
  contentType: string;
  recipeId: string;
  fileType: 'photo' | 'archive';
}

export interface S3UploadResponse {
  uploadUrl: string; // Pre-signed upload URL
  fileUrl: string; // Final file access URL
  fields: Record<string, string>; // Additional form fields for upload
}

/**
 * Configuration types
 */
export interface ApiConfig {
  baseUrl: string;
  region: string;
  userPoolId: string;
  userPoolClientId: string;
  timeout: number;
}

/**
 * Extension-specific types
 */
export interface ExtensionMessage {
  type: 'EXTRACT_RECIPE' | 'SAVE_RECIPE' | 'GET_RECIPES' | 'SYNC_RECIPES';
  payload?: unknown;
  requestId: string;
}

export interface ExtensionResponse {
  success: boolean;
  data?: unknown;
  error?: string;
  requestId: string;
}

/**
 * Type guards for runtime type checking
 */
export const isRecipe = (obj: unknown): obj is Recipe => {
  if (typeof obj !== 'object' || obj === null) return false;
  const recipe = obj as Recipe;
  return (
    typeof recipe.id === 'string' &&
    typeof recipe.userId === 'string' &&
    typeof recipe.title === 'string' &&
    Array.isArray(recipe.ingredients) &&
    Array.isArray(recipe.instructions) &&
    typeof recipe.sourceUrl === 'string'
  );
};

export const isIngredient = (obj: unknown): obj is Ingredient => {
  if (typeof obj !== 'object' || obj === null) return false;
  const ingredient = obj as Ingredient;
  return (
    typeof ingredient.name === 'string' &&
    typeof ingredient.originalText === 'string'
  );
};

export const isInstruction = (obj: unknown): obj is Instruction => {
  if (typeof obj !== 'object' || obj === null) return false;
  const instruction = obj as Instruction;
  return (
    typeof instruction.stepNumber === 'number' &&
    typeof instruction.text === 'string'
  );
};
